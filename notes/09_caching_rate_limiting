-----------------------------------------------------------------------
|  CHAPTER 9 - CACHING & RATE LIMITING                                |
-----------------------------------------------------------------------

- Caching

    - We'll add a simple caching function, which caches query results temporarily in application
        memory.  We'll use the 'Flask-Caching' extension to do this.


    - Many applications use this type of caching, storing the cache in the same web server.
        Another approach is to use something like Memcached or Redis.


    - The Flask-Caching flow works like:

        1. Request the get /recipes resource.

        2. Use the key to search for the existing cache (Flask-Caching will be using request.path 
             and hashed_args to be the key value, for example, 
             recipesbcd8b0c2eb1fce714eab6cef0d771acc).

        3. If the recipes were previously cached, return the cached data.

        4. If no cache for these recipes exists, follow the standard flow to get the recipes
             from the database.

        5. Save the result (the recipe data) in the cache.

        6. Return the recipe data.



- Implementing Caching Functionality

    - We'll add the 'Flask-Caching' package in 'requirements.txt':

        Flask-Caching==1.7.2


    - Import 'Cache' in 'extensions.py' and instantiate it.

        from flask_caching import Cache

        cache = Cache()


    - Initialize the cache in 'app.py'.

        from extensions import cache

        def register_extensions(app):
            ...
            cache.init_app(app)


    - Add the caching-related configuration in 'config.py'.

        CACHE_TYPE = 'simple'
        CACHE_DEFAULT_TIMEOUT = 10 * 60


    - We'll add the cache decorator to the 'RecipeListResource.get' method in 'resources/recipe.py'.

        class RecipeListResource(Resource):
            @use_kwargs({...})
            @cache.cached(timeout=60, query_string=True)
            def get(self, q, page, per_page, sort, order):
                ...


    - We add some logging methods to the definition of 'register_exceptions' in 'app.py' so that 
        we can see the caching behavior.

        def register_exceptions():
            ...
            @app.before_request
            def before_request():
                print('\n==================== BEFORE REQUEST ====================\n')
                print(cache.cache._cache.keys())
                print('\n=======================================================\n')

            @app.after_request
            def after_request(response):
                print('\n==================== AFTER REQUEST ====================\n')
                print(cache.cache._cache.keys())
                print('\n=======================================================\n')



- Testing the Caching Function

    - Try sending the same query multiple times, and in the application logs we can see the caching
        working.

        http://localhost:5000/recipes



- Clearing the Cache

    - We'll need to clear the cache when data is updated, since we don't want to serve stale
        data.  To see this, we can retrieve recipe data, update it, and we'll see that the
        data is stale.


    - Add a new method in 'utils.py' to clear the cache.

        from extensions import cache

        def clear_cache(key_prefix):
            keys = [key for key in cache._cache.keys() if key.startswith(key_prefix)]
            cache.delete_many(*keys)


    - Next, we need to invoke 'clear_cache' is the resources that update recipe data in
        'resources/recipe.py'.

        RecipeResource.patch
        RecipeResource.delete
        RecipePublishResource.put
        RecipePublishResource.delete
        RecipeCoverUploadResource.put


        # Clear the cache before returning
        clear_cache('/recipes')


    - We also need to update the 'UserAvatarUploadResource.put' method in 'resources/user.py'. 

        from utils import clear_cache

        clear_cache('/recipes')



- API Rate Limiting

    - Sometimes, we want to set a per-user limit on how many API calls can be made in a specific
        timeframe.  For instance, we can limit a single user to no more than 100 calls per second.


    - HTTP Headers used for rate limiting:

        X-RateLimit-Limit: Shows the rate limit of this API endpoint

        X-RateLimit-Remaining: Shows the number of remaining requests allowed before
                                 the next reset

        X-RateLimit-Reset: When the rate limit will be reset (in UTC epoch time)

        Retry-After: The number of seconds before the next reset


    - When a user violates the rate limit, they will receive a '429 Too Many Requests' response.

        {
            'errors': 'Too Many Requests'
        }


    - We'll use the 'Flask-Limiter' extension to easily add rate-limiting functionality.  It
        includes lots of options, including support for using Memcached or Redis.



- Implementing API Rate-Limiting Functionality

    - Add 'Flask-Limiter' to 'requirements.txt'.

        Flask-Limiter==1.0.1


    - Import the 'Limiter' in 'extensions.py'.

        from flask_limiter import Limiter
        from flask_limiter.util import get_remote_address

        limiter = Limiter(key_func=get_remote_address)


    - Import and initialize the limiter object in 'app.py'.

        from extensions import limiter

        def register_exceptions():
            ...
            limiter.init_app(app)


    - In 'config.py', add the 'RATELIMIT_HEADERS_ENABLED' option.

        RATELIMIT_HEADERS_ENABLED = True


    - Now, we need to add the limiter to the 'RecipeListResource' in 'resources/recipe.py'.

        from extensions import limiter

        class RecipeListResource(Resource):
            decorators = [limiter.limit('2 per minute',
                                        methods=['GET'], 
                                        error_message='Too Many Requests')]
            ...



- Adding a Whitelist

    - If we want to ease the rate limit for some customers (or the developers), we can set up an
        IP whitelist.


    - We'll add an '@limiter.request_filter' in 'app.py' in the 'register_exceptions' method.

        from flask import request

        def register_extensions(app):
            ...
            @limiter.request_filter
            def ip_whitelist():
                return request.remote_addr == '127.0.0.1