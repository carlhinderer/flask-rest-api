-----------------------------------------------------------------------
|  CHAPTER 2 - BUILDING THE PROJECT                                   |
-----------------------------------------------------------------------

- Flask-RESTful Application

    - Flask-RESTful is a Flask extension that allows us to quickly develop RESTful
        APIs.


    - Our recipe-sharing application, 'SmileCook', will have the following endpoints:

        HTTP Verb    Description            Method Name                     URL
        --------------------------------------------------------------------------------------
        GET          Gets all recipes       RecipeListResource.get          /recipes
        POST         Creates a recipe       RecipeListResource.post         /recipes

        GET          Gets a recipe          RecipeResource.get              /recipes/1
        PUT          Updates a recipe       RecipeResource.put              /recipes/1
        DELETE       Deletes a recipe       RecipeResource.delete           /recipes/1

        PUT          Sets to published      RecipePublishResource.put       /recipes/1/publish
        DELETE       Sets to draft          RecipePublishResource.delete    /recipes/1/publish



- Creating the Recipe Model

    - The Recipe model will have the following attributes:

        name:             The name of the recipe.
        description:      The description of the recipe.
        num_of_servings:  The number of servings.
        cook_time:        The cooking time required. This is an integer whose units are in seconds.
        directions:       The directions.
        is_publish:       The publish status of the recipe; the default is draft.


    - We define the recipe in 'smilecook/models/recipe.py'.



- Resourceful Routing

    - The main building blocks of Flask-RESTful are resources.  Resources are built on 
        top of Flask's pluggable view.

    - We will group the CRUD actions on a recipe under 'RecipeResource'.

    - We will brouop the publish and unpublish actions under 'RecipePublishResource'.

    - Implementing these resources is simple.  We just need to inherit from the
        'flask_restful.Resource' class and implement the corresponding HTTP verbs.



- Defining an API Endpoint for the Recipe Model

    - First, we create a folder called 'resources' under the project and create a file
        called 'recipe.py' in it.

    - We add the 'RecipeListResource' to our 'resources/recipe.py' file.

    - Notice that we do not have to 'jsonify' our object before sending it to the client,
        because Flask-RESTful does it for us behind the scenes.

    - Next we add the 'RecipeResource' to the same file.

    - Next we add the 'RecipePublishResource', also to the same file.

    - If the client request is with an HTTP verb that has no corresponding handling method
        in the resource, Flask-RESTful will return the HTTP status code 405 Method Not Allowed.



- Configuring Endpoints

    - Now that we have defined our resources, we will set up some endpoints so that users can
        send requests to them.

    - We will be using the 'add_resource' method on the API object to specify the URL for
        these endpoints and route the client HTTP request to our resources.


    - We'll create the 'app.py' file, which will be our main application file.

        smilecook/app.py
        -----------------------------------------------------------
        from flask import Flask
        from flask_restful import Api
        
        from resources.recipe import RecipeListResource, RecipeResource, RecipePublishResource
        
        app = Flask(__name__)
        api = Api(app)
        
        api.add_resource(RecipeListResource, '/recipes')
        api.add_resource(RecipeResource, '/recipes/<int:recipe_id>')
        api.add_resource(RecipePublishResource, '/recipes/<int:recipe_id>/publish')
        
        if __name__ == '__main__':
            app.run(port=5000, debug=True)