-----------------------------------------------------------------------
|  CHAPTER 4 - AUTHENTICATION & SECURITY WITH JWT                     |
-----------------------------------------------------------------------

- 4 Parts of This Chapter

    1. Authenticate the user and allow them to log in on their own profile page.

    2. Complete the recipe sharing system, and allow users to publish and unpublish 
         recipes.

    3. Refresh the security token and implement the logout features.

    4. Use the 'blacklist' function to force a user out.



- JWT

    - A Json Web Token is used to encode a user identity and sign it digitally, making it
        an unforgeable token that identifies the user.


    - A JWT has a header, payload, and signature.  


    - The header contains the encryption type and algorithm.

        Header
        -------------
        'typ': 'JWT'       # The encryption type
        'alg': 'HS256'     # The encryption algorithm

        >>> import base64
        >>> header = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9'

        >>> base64.b64decode(header)
        b'{"typ":"JWT","alg":"HS256"}'


    - The payload contents are arbitrary.  The developer can put whatever they want in it.
        Note that it's base64-encoded, but not encrypted, so we shouldn't put passwords or
        credit card numbers in it.

        >>> payload = 'eyJpYXQiOjE1NjQ5ODI5OTcsIm5iZiI6MTU2NDk4Mjk5NywianRpIjoiMGIzOTVlODQtN
                           jFjMy00NjM3LTkwMzYtZjgyZDgyYTllNzc5IiwiZXhwIjoxNTY0OTgzODk3LCJpZG
                           VudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0'

        >>> base64.b64decode(payload + '==')
        b'{"iat":1564982997,"nbf":1564982997,"jti":"0b395e84-61c3-4637-9036-f82d82a9e779",
            "exp":1564983897,"identity":3,"fresh":false,"type":"access"}'


    - The secret part is a signature created by the HS256 algorithm.  It encrypts the encoded
        header and payload data with the secret key which is known by the application server
        only.


    - The structure of the parts together looks like:

        header.payload.secret



- Flask-JWT-Extended

    - Flask-JWT-Extended is a user authentication package

        - It provides the 'create_access_token' function for making new access JWTs.

        - It also provides the 'jwt_required' decorator for protecting the API endpoints.

        - It also provides the 'get_jwt_identity' function to get the identity of a JWT in a
            protected endpoint.


    - There are key settings we will be using.

        SECRET_KEY      # Key for encrypting the message and generating the signature, should
                        #   be a complex string

        JWT_ERROR_MESSAGE_KEY        # The key for the error message whenever there is an error.



- Adding Flask-JWT-Extended

    - First, we'll add the Flask-JWT-Extended package.

        # requirements.txt
        --------------------------
        Flask-JWT-Extended==3.20.0


    - Next, add the required keys to the Config class.

        # config.py
        --------------------------
        SECRET_KEY = 'super-secret-key'
        JWT_ERROR_MESSAGE_KEY = 'message'


    - Now, add the 'JWTManager' to the extensions.

        # extensions.py
        --------------------------
        from flask_jwt_extended import JWTManager

        jwt = JWTManager()


    - And, initialize it in 'app.py'.

        # app.py
        --------------------------
        from extensions import db, jwt

        def register_extensions(app):
            db.init_app(app)
            migrate = Migrate(app, db)
            jwt.init_app(app)



- Implementing a User Function

    - First, we create a login resource at 'resources/token.py'.


    - Next, we create a new resource 'UserResource' in the 'resources/users.py' for 
        getting user details.  If a user is not authenticated, they can only see their
        id and username.  If they are authenticated, they can also see their email
        address.

        # resources/user.py
        ----------------------------
        from flask_jwt_extended import jwt_optional, get_jwt_identity

        class UserResource(Resource):

            @jwt_optional
            def get(self, username):
                ...


    - Finally, we'll import our new resources in 'app.py'.

        # app.py
        ----------------------------
        from resources.user import UserListResource, UserResource
        from resources.token import TokenResource

        def register_resources(app):
            api.add_resource(UserListResource, '/users')
            api.add_resource(UserResource, '/users/<string:username>')
            api.add_resource(TokenResource, '/token')



- Testing the User Login Function

    - Now, we will test that the information obtained from the 'users/{username}' route is
        different before and after user login.


    - First, we'll create a new user:

        $ http POST :5000/users username="James" email="james@gmail.com" password="WkQad19"


    - Now, we'll see the id and username when we navigate to the route.

        # Navigate to in browser
        http://localhost:5000/users/James

        # We see
        {
            "id": 3,
            "username": "James"
        }


    - Next, we'll log in through the API.

        $ http POST :5000/token email="james@gmail.com" password="WkQad19"

        # Response
        {
            "access_token": eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDY4NDMzNTAsIm5iZiI
                6MTYwNjg0MzM1MCwianRpIjoiZDM1NjBiYzEtYWI3My00YTc4LTgyNTktZjVlNmIxMjRkYjFhIiwiZXh
                wIjoxNjA2ODQ0MjUwLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.qHs
                bro3YlaTw0a62qHurkv67e2K2mtOGRQAN_wfhUx8
        }


    - Now, we'll get the user details again, this time passing in the access token in the 
        'Authorization' HTTP header, prepended with 'Bearer'.

        $ http GET :5000/users/James Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ
        9.eyJpYXQiOjE2MDY4NDMzNTAsIm5iZiI6MTYwNjg0MzM1MCwianRpIjoiZDM1NjBiYzEtYWI3My00YTc4LTgy
        NTktZjVlNmIxMjRkYjFhIiwiZXhwIjoxNjA2ODQ0MjUwLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eX
        BlIjoiYWNjZXNzIn0.qHsbro3YlaTw0a62qHurkv67e2K2mtOGRQAN_wfhUx8"

      And, we get the email address this time:

        {
            "email": "james@gmail.com",
            "id": 3,
            "username": "James"
        }



- Creating the 'me' Endpoint

    - Now, we will create a special endpoint, '/users/me'.  It will allow us to get the 
        authenticated user information back by using 'access_token'.  


    - First, we'll create a 'get_by_id' method in the user model.

        # models/user.py
        --------------------------
        @classmethod
        def get_by_id(cls, id):
            return cls.query.filter_by(id=id).first()


    - Next, we'll create a new 'resource' class under the user model.

        # resources/user.py
        --------------------------
        from flask_jwt_extended import jwt_optional, get_jwt_identity, jwt_required

        class MeResource(Resource):

            @jwt_required
            def get(self):
                ...


    - Next we'll add the endpoint for the '/me' endpoint.

        # app.py
        --------------------------
        from resources.user import UserListResource, UserResource, MeResource

        api.add_resource(MeResource, '/me')


    - Now we can test the new endpoint:

        $ http :5000/me Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ
        9.eyJpYXQiOjE2MDY4NDMzNTAsIm5iZiI6MTYwNjg0MzM1MCwianRpIjoiZDM1NjBiYzEtYWI3My00YTc4LTgy
        NTktZjVlNmIxMjRkYjFhIiwiZXhwIjoxNjA2ODQ0MjUwLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eX
        BlIjoiYWNjZXNzIn0.qHsbro3YlaTw0a62qHurkv67e2K2mtOGRQAN_wfhUx8"

        # Response
        {
            "email": "james@gmail.com",
            "id": 3,
            "username": "James"
        }



- Implementing Access-Controlled Recipe Management Features

    - We will need a few new methods in the Recipe model so that users can manage their
        recipes.  We will add these new methods:

        'data'                 # Used to return the data in a dictionary format

        'get_all_published'    # Gets all the published recipes

        'get_by_id'            # This method gets the recipes by id

        'save'                 # Persists data to the database

        'delete'               # Deletes data from the database


    - In the Recipe model, we add these functions.

        # models/recipe.py
        ---------------------------
        class Recipe(db.Model):

            def data(self):
                return {
                    'id': self.id,
                    'name': self.name,
                    'description': self.description,
                    'num_of_servings': self.num_of_servings,
                    'cook_time': self.cook_time,
                    'directions': self.directions,
                    'user_id': self.user_id
                }
        
            @classmethod
            def get_all_published(cls):
                return cls.query.filter_by(is_publish=True).all()
        
            @classmethod
            def get_by_id(cls, recipe_id):
                return cls.query.filter_by(id=recipe_id).first()
        
            def save(self):
                db.session.add(self)
                db.session.commit()
        
            def delete(self):
                db.session.delete(self)
                db.session.commit()


    - We also need to delete the 'recipe_list' and 'get_last_id' functionality from the Recipe
        model that we used before we had a database.


    - In 'resources/recipe.py', 

        # Add this import
        from flask_jwt_extended import get_jwt_identity, jwt_required, jwt_optional

        # Remove this import
        from models.recipe import recipe_list


    - Now, update the 'RecipeListResource' get and post methods to use the database.


    - Next, update the 'RecipeResource' get, put, and delete methods to use the database.



- Testing the Recipe Management Functions

    - We'll test our recipe creation.  We'll use the URL:

        POST http://localhost:5000/recipes

    We need these headers:

        Authorization: Bearer TokenValue
        Content-Type: application/json

      We send this JSON:

        {
            "name": "Cheese Pizza",
            "description": "This is a lovely cheese pizza",
            "num_of_servings": 2,
            "cook_time": 30,
            "directions": "This is how you make it"
        }


    - Now, we can test retrieving a recipe.  We'll use the URL:

        GET http://localhost:5000/recipes/3



- Refresh Tokens

    - For the sake of security, we often set an expiration time for our tokens.  flask-jwt-extended
        defaults this to 15 minutes.  Because a token will expire, we need a function to refresh
        it without putting in their credentials again.


    - A flask-jwt-extended refresh token is a long-lived token that can be used to generate new
        access tokens.  Note that a refresh token cannot itself be used as an access token.
        The 'jwt_required' and 'jwt_optional' decorators need an access token.


    - These are the refresh-token related functions:

        create_access_token
          Creates a new access token

        create_refresh_token
          Creates a refresh token

        jwt_refresh_token_required
          Specifies that the refresh token is required

        get_jwt_identity
          Gets the user that holds the current access token


    - We will add a 'fresh' attribute to our token.  It will only be set to True when the user
        first gets the token.  When they refresh it, 'fresh' will be set to False.

      This will allow users to avoid putting in their credentials over and over.  However, for
        some sensitive functions, like a password change, they will have to re-enter it.



- Adding a Refresh Token Function

    - In 'resources/token.py' import the necessary functions.

        from flask_jwt_extended import (    
            create_access_token,
            create_refresh_token,
            jwt_refresh_token_required,
            get_jwt_identity
        )


    - Modify the 'post' method to generate an access token and a refresh token, and return
        them both at login.


    - Add a 'RefreshResource' class to 'token.py'.

        class RefreshResource(Resource):

            @jwt_refresh_token_required
            def post(self):
                current_user = get_jwt_identity()
                access_token = create_access_token(identity=current_user, fresh=False)
                return {access_token: access_token}, HTTPStatus.OK


    - Finally, we add the route for 'RefreshResource'.

        from resources.token import TokenResource, RefreshResource

        def register_resources(app):
            api.add_resource(RefreshResource, '/refresh')



- Obtaining a New Access Token Using a Refresh Token

    - Now, we'll use Postman to get access and refresh tokens, then obtain a new token by
        using the refresh token.

      First, we'll send a POST request to /token to get the tokens.

        POST http://localhost:5000/token

        Body:

        {    
            "email": "james@gmail.com",
            "password": "WkQad19"
        }


    - We got a refresh token and access token back.  They are the same.  Next, we'll refresh the
        token.  We'll add an 'Authorization' header with the token and send this command:

        POST http://localhost:5000/refresh



- The User Logout Mechanism

    - The flask-jwt-extended package supports the logout function.  It works by putting the
        user's token into a blacklist when the user is logged out.

      With the blacklist in place, the application can use the 'token_in_blacklist_loader' to
        verify whether the user has logged out or not.



- Implementing the Logout Function

    - We will declare a 'blacklist' to store logged out tokens.  We will check whether the access 
        token is still valid using the blacklist.

      First, we'll import the 'jwt_required' and 'get_raw_jwt' into 'resources/token.py'.

        from flask_jwt_extended import (
            create_access_token,
            create_refresh_token,
            jwt_refresh_token_required,
            get_jwt_identity,
            jwt_required,
            get_raw_jwt)


    - Also in 'resources/token.py', create the blacklist.

        black_list = set()

      And, create the 'RevokeResource' class with a post method.  

        class RevokeResource(Resource):

            @jwt_required
            def post(self):
                jti = get_raw_jwt()['jti']
                black_list.add(jti)
                return {'message': 'Successfully logged out'}, HTTPStatus.OK


    - Add these lines to 'config.py', which enables the blacklist feature and tells the 
        application to check both the access and refresh tokens.

        class Config:
            ...
            JWT_BLACKLIST_ENABLED = True
            JWT_BLACKLIST_TOKEN_CHECKS = ['access', 'refresh']


    - Next, import 'RevokeResource' and 'black_list' into 'app.py'.

        from resources.token import TokenResource, RefreshResource, RevokeResource, black_list

      Add the 'check_if_token_in_blacklist' method to check whether the token is in the blacklist.

        def register_extensions(app):
            db.app = app
            db.init_app(app)
            migrate = Migrate(app, db)
            jwt.init_app(app)

            @jwt.token_in_blacklist_loader
            def check_if_token_in_blacklist(decrypted_token):
                jti = decrypted_token['jti']
                return jti in black_list

      Also, add the route for the logout.

        api.add_resource(RevokeResource, '/revoke')



- Testing the Logout Function

    - Create a new Postman request for the logout.

        POST http://localhost:5000/revoke


    - We should see that the message that we have been successfully logged out.  If we try to
        run the logout request again, we should see a message that our token has been revoked.



- Implementing Access Control on the Publish/Unpublish Recipe Function

    - Modify the 'put' and 'delete' options in the publish/unpublish resource to restrict access
        to only authenticated users.


    - Ensure that only a recipe author can publish/unpublish a recipe.


    - Test that publish/unpublish can be performed by an author and cannot be performed by a
        non-author.