-----------------------------------------------------------------------
|  CHAPTER 4 - AUTHENTICATION & SECURITY WITH JWT                     |
-----------------------------------------------------------------------

- 4 Parts of This Chapter

    1. Authenticate the user and allow them to log in on their own profile page.

    2. Complete the recipe sharing system, and allow users to publish and unpublish 
         recipes.

    3. Refresh the security token and implement the logout features.

    4. Use the 'blacklist' function to force a user out.



- JWT

    - A Json Web Token is used to encode a user identity and sign it digitally, making it
        an unforgeable token that identifies the user.


    - A JWT has a header, payload, and signature.  


    - The header contains the encryption type and algorithm.

        Header
        -------------
        'typ': 'JWT'       # The encryption type
        'alg': 'HS256'     # The encryption algorithm

        >>> import base64
        >>> header = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9'

        >>> base64.b64decode(header)
        b'{"typ":"JWT","alg":"HS256"}'


    - The payload contents are arbitrary.  The developer can put whatever they want in it.
        Note that it's base64-encoded, but not encrypted, so we shouldn't put passwords or
        credit card numbers in it.

        >>> payload = 'eyJpYXQiOjE1NjQ5ODI5OTcsIm5iZiI6MTU2NDk4Mjk5NywianRpIjoiMGIzOTVlODQtN
                           jFjMy00NjM3LTkwMzYtZjgyZDgyYTllNzc5IiwiZXhwIjoxNTY0OTgzODk3LCJpZG
                           VudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0'

        >>> base64.b64decode(payload + '==')
        b'{"iat":1564982997,"nbf":1564982997,"jti":"0b395e84-61c3-4637-9036-f82d82a9e779",
            "exp":1564983897,"identity":3,"fresh":false,"type":"access"}'


    - The secret part is a signature created by the HS256 algorithm.  It encrypts the encoded
        header and payload data with the secret key which is known by the application server
        only.


    - The structure of the parts together looks like:

        header.payload.secret



- Flask-JWT-Extended

    - Flask-JWT-Extended is a user authentication package

        - It provides the 'create_access_token' function for making new access JWTs.

        - It also provides the 'jwt_required' decorator for protecting the API endpoints.

        - It also provides the 'get_jwt_identity' function to get the identity of a JWT in a
            protected endpoint.


    - There are key settings we will be using.

        SECRET_KEY      # Key for encrypting the message and generating the signature, should
                        #   be a complex string

        JWT_ERROR_MESSAGE_KEY        # The key for the error message whenever there is an error.



- Adding Flask-JWT-Extended

    - First, we'll add the Flask-JWT-Extended package.

        # requirements.txt
        --------------------------
        Flask-JWT-Extended==3.20.0


    - Next, add the required keys to the Config class.

        # config.py
        --------------------------
        SECRET_KEY = 'super-secret-key'
        JWT_ERROR_MESSAGE_KEY = 'message'


    - Now, add the 'JWTManager' to the extensions.

        # extensions.py
        --------------------------
        from flask_jwt_extended import JWTManager

        jwt = JWTManager()


    - And, initialize it in 'app.py'.

        # app.py
        --------------------------
        from extensions import db, jwt

        def register_extensions(app):
            db.init_app(app)
            migrate = Migrate(app, db)
            jwt.init_app(app)



- Implementing a User Function

    - First, we create a login resource at 'resources/token.py'.


    - Next, we create a new resource 'UserResource' in the 'resources/users.py' for 
        getting user details.  If a user is not authenticated, they can only see their
        id and username.  If they are authenticated, they can also see their email
        address.

        # resources/user.py
        ----------------------------
        from flask_jwt_extended import jwt_optional, get_jwt_identity

        class UserResource(Resource):

            @jwt_optional
            def get(self, username):
                ...


    - Finally, we'll import our new resources in 'app.py'.

        # app.py
        ----------------------------
        from resources.user import UserListResource, UserResource
        from resources.token import TokenResource

        def register_resources(app):
            api.add_resource(UserListResource, '/users')
            api.add_resource(UserResource, '/users/<string:username>')
            api.add_resource(TokenResource, '/token')



- Testing the User Login Function

    - Now, we will test that the information obtained from the 'users/{username}' route is
        different before and after user login.


    - First, we'll create a new user:

        $ http POST :5000/users username="James" email="james@gmail.com" password="WkQad19"


    - Now, we'll see the id and username when we navigate to the route.

        # Navigate to in browser
        http://localhost:5000/users/James

        # We see
        {
            "id": 3,
            "username": "James"
        }


    - Next, we'll log in through the API.

        $ http POST :5000/token email="james@gmail.com" password="WkQad19"

        # Response
        {
            "access_token": eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDY4NDMzNTAsIm5iZiI
                6MTYwNjg0MzM1MCwianRpIjoiZDM1NjBiYzEtYWI3My00YTc4LTgyNTktZjVlNmIxMjRkYjFhIiwiZXh
                wIjoxNjA2ODQ0MjUwLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.qHs
                bro3YlaTw0a62qHurkv67e2K2mtOGRQAN_wfhUx8
        }


    - Now, we'll get the user details again, this time passing in the access token in the 
        'Authorization' HTTP header, prepended with 'Bearer'.

        $ http GET :5000/users/James Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ
        9.eyJpYXQiOjE2MDY4NDMzNTAsIm5iZiI6MTYwNjg0MzM1MCwianRpIjoiZDM1NjBiYzEtYWI3My00YTc4LTgy
        NTktZjVlNmIxMjRkYjFhIiwiZXhwIjoxNjA2ODQ0MjUwLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eX
        BlIjoiYWNjZXNzIn0.qHsbro3YlaTw0a62qHurkv67e2K2mtOGRQAN_wfhUx8"

      And, we get the email address this time:

        {
            "email": "james@gmail.com",
            "id": 3,
            "username": "James"
        }



- Creating the 'me' Endpoint

    - Now, we will create a special endpoint, '/users/me'.  It will allow us to get the 
        authenticated user information back by using 'access_token'.  


    - First, we'll create a 'get_by_id' method in the user model.

        # models/user.py
        --------------------------
        @classmethod
        def get_by_id(cls, id):
            return cls.query.filter_by(id=id).first()


    - Next, we'll create a new 'resource' class under the user model.

        # resources/user.py
        --------------------------
        from flask_jwt_extended import jwt_optional, get_jwt_identity, jwt_required

        class MeResource(Resource):

            @jwt_required
            def get(self):
                ...


    - Next we'll add the endpoint for the '/me' endpoint.

        # app.py
        --------------------------
        from resources.user import UserListResource, UserResource, MeResource

        api.add_resource(MeResource, '/me')


    - Now we can test the new endpoint:

        $ http :5000/me Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ
        9.eyJpYXQiOjE2MDY4NDMzNTAsIm5iZiI6MTYwNjg0MzM1MCwianRpIjoiZDM1NjBiYzEtYWI3My00YTc4LTgy
        NTktZjVlNmIxMjRkYjFhIiwiZXhwIjoxNjA2ODQ0MjUwLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eX
        BlIjoiYWNjZXNzIn0.qHsbro3YlaTw0a62qHurkv67e2K2mtOGRQAN_wfhUx8"

        # Response
        {
            "email": "james@gmail.com",
            "id": 3,
            "username": "James"
        }



- Implementing Access-Controlled Recipe Management Features

    - We will need a few new methods in the Recipe model so that users can manage their
        recipes.  We will add these new methods:

        'data'                 # Used to return the data in a dictionary format

        'get_all_published'    # Gets all the published recipes

        'get_by_id'            # This method gets the recipes by id

        'save'                 # Persists data to the database

        'delete'               # Deletes data from the database


    - In the Recipe model, we add these functions.

        # models/recipe.py
        ---------------------------
        class Recipe(db.Model):

            def data(self):
                return {
                    'id': self.id,
                    'name': self.name,
                    'description': self.description,
                    'num_of_servings': self.num_of_servings,
                    'cook_time': self.cook_time,
                    'directions': self.directions,
                    'user_id': self.user_id
                }
        
            @classmethod
            def get_all_published(cls):
                return cls.query.filter_by(is_publish=True).all()
        
            @classmethod
            def get_by_id(cls, recipe_id):
                return cls.query.filter_by(id=recipe_id).first()
        
            def save(self):
                db.session.add(self)
                db.session.commit()
        
            def delete(self):
                db.session.delete(self)
                db.session.commit()


    - We also need to delete the 'recipe_list' and 'get_last_id' functionality from the Recipe
        model that we used before we had a database.


    - In 'resources/recipe.py', 

        # Add this import
        from flask_jwt_extended import get_jwt_identity, jwt_required, jwt_optional

        # Remove this import
        from models.recipe import recipe_list



- Testing the Recipe Management Functions


- Refresh Tokens


- Adding a Refresh Token Function


- Obtaining a New Access Token Using a Refresh Token


- The User Logout Mechanism


- Implementing the Logout Function


- Testing the Logout Function


- Implementing Access Control on the Publish/Unpublish Recipe Function