-----------------------------------------------------------------------
|  CHAPTER 3 - DATABASES                                              |
-----------------------------------------------------------------------

- Database Packages

    - We'll be using Postgres as our database.  We will use the 'psycopg2' package to connect
        our Flask application to it.  We could also use 'pgAdmin' for GUI management of
        the DB if we wanted to.

    - We'll use SQLAlchemy as our ORM.

    - We'll use Flask-Migrate to handle the migrations.

    - We'll use 'passlib' to hash passwords.

    - Add these packages to 'requirements.txt':

        Flask-SQLAlchemy==2.4.0
        Flask-Migrate==2.5.2
        psycopg2==2.8.3
        passlib==1.7.1



- Creating the Database

    $ sudo su - postgres
    $ psql

    > CREATE DATABASE smilecook;
    > CREATE USER smilecookuser WITH PASSWORD 'smilecookuser';
    > GRANT ALL PRIVILEGES ON DATABASE smilecook TO smilecookuser;



- Creating the User Model

    - Attributes

        id
        username      # Unique
        email         # Unique
        password
        is_active
        recipes       # Join table relationship
        created_at
        updated_at

    - Methods

        get_by_username
        get_by_email



- Creating the Recipe Model

    - Attributes

        id
        name
        description
        num_of_servings
        cook_time
        directions
        is_publish
        created_at
        updated_at



- Creating the config.py and extensions.py files

    - Create a 'config.py' file in the project root.

        # smilecook/config.py
        -----------------------------
        class Config:
            DEBUG = True

            SQLALCHEMY_DATABASE_URI = 'postgresql://smilecookuser:smilecookpw@localhost/smilecook'
            SQLALCHEMY_TRACK_MODIFICATIONS = False


    - Create a 'extensions.py' file in the project root.

        # smilecook/extensions.py
        -----------------------------
        from flask_sqlalchemy import SQLAlchemy

        db = SQLAlchemy()



- Adding the Models

    - Create the User model in 'models/user.py'.

    - Next, change the Recipe model in 'models/recipe.py'.

    - Next, we'll update 'app.py' to import all of our necessary packages and add a
        'create_app' function to create the app.

        # app.py
        ------------------------------------
        from flask import Flask
        from flask_migrate import Migrate
        from flask_restful import Api

        from config import Config
        from extensions import db
        from models.user import User
        from resources.recipe import RecipeListResource, RecipeResource, RecipePublishResource


        def create_app():
            app = Flask(__name__)
            app.config.from_object(Config)

            register_extensions(app)
            register_resources(app)
            return app

        def register_extensions(app):
            db.init_app(app)
            migrate = Migrate(app, db)

        def register_resources(app):
            api = Api(app)

            api.add_resource(RecipeListResource, '/recipes')
            api.add_resource(RecipeResource, '/recipes/<int:recipe_id>')
            api.add_resource(RecipePublishResource, '/recipes/<int:recipe_id>/publish')


        if __name__ == '__main__':
            app = create_app()
            app.run()



- Using Flask-Migrate to Build a Database Upgrade Script

    - Initialize the database.  This will create a migration repository.

        $ flask db init


    - Now, create the migration for the tables.

        $ flask db migrate


    - Now, run the migration to create the tables.

        $ flask db upgrade



- Inserting a Row

    - In the Python console, add the necessary classes.

        $ flask shell

        >>> from models.user import User
        >>> from models.recipe import Recipe
        >>> from extensions import db


    - Now, add a sample user.

        >>> user = User(username='Jack', email='jack@gmail.com', password='WkQa')
        >>> db.session.add(user)
        >>> db.session.commit()


    - And add a couple recipes.

        >>> pizza = Recipe(name='Cheese Pizza', description='This is a lovely cheese pizza recipe', 
               num_of_servings=2, cook_time=30, directions='This is how you make it', user_id=user.id)

        >>> pasta = Recipe(name='Tomato Pasta', description='This is a lovely tomato pasta recipe',
                num_of_servings=3, cook_time=20, directions='This is how you make it', user_id=user.id)

        >>> db.session.add(pizza)
        >>> db.session.add(pasta)
        >>> db.session.commit()


    - Now, retrieve our user and get their associated recipes.

        >>> user = User.query.filter_by(username='Jack').first()
        >>> user.recipes

        >>> for recipe in user.recipes:
                print('{} recipe made by {} can serve {} people.'.format(recipe.name,
                    recipe.user.username, recipe.num_of_servings))



- Password Hashing

    - Hashing is a one-way function.  It requires very little computing power to convert
        plaintext to a hash value, but a huge amount to reverse the hash to plaintext.
        This makes it useful for storing password values.


    - Here, we'll use the 'passlib' module to hash passwords in a new file, 'utils.py' in
        the project root.

        # smilecook/utils.py
        -------------------------------
        from passlib.hash import pbkdf2_sha256

        def hash_password(password):
            return pbkdf2_sha256.hash(password)
             
        def check_password(password, hashed):
            return pbkdf2_sha256.verify(password, hashed)


    - Add a new resource, 'UserListResource' in 'resources/user.py', to create new users.


    - Add the new resource to 'app.py'.

        # app.py
        -------------------------------
        # Remove from models.user import User

        from resources.user import UserListResource

        api.add_resource(UserListResource, '/users')



- Testing the New User Creation

    - Now we can add a new user.

        $ http POST :5000/users username='john' email='john@gmail.com' password='QQwA'



- Upgrading and Downgrading a Database

    - Add a new attribute to the User model.

        # models/user.py
        ------------------------
        class User(db.Model):
            ...
            bio = db.Column(db.String(200))


    - Run the migrate command to create a migration to add the new column.

        $ flask db migrate


    - Run the migration.

        $ flask db upgrade


    - Later, we decide that we don't need the column after all, so we remove it.

        $ flask db downgrade