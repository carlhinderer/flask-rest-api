-----------------------------------------------------------------------
|  CHAPTER 10 - DEPLOYMENT                                            |
-----------------------------------------------------------------------

- IaaS, PaaS, and SaaS

    - IaaS = Infrastructure like servers, software, network devices
           = AWS EC2 and GCE
           = Very flexible
           = Still need to understand underlying platforms

    - PaaS = Users don't worry about infrastructure, just deploy apps
           = Heroku, Azure, AWS Elastic Beanstalk
           = Reduced setup time, just worry about app code
           = Higher cost

    - SaaS = Just get application services from third party web apps
           = Gmail, Dropbox, Salesforce, Slack
           = Low cost, easy and effective
           = Inflexible, data security and availability can be concerns



- Creating Separate Production, Staging, and Development Environments

    - We're going to split the 'config.py' into 4 separate scripts.  Here is the new version of
        'config.py', which contains settings common to all environments.

        import os

        class Config:
            ...

        class DevelopmentConfig(Config):
            ...

        class StagingConfig(Config):
            ...

        class ProductionConfig(Config):
            ...


    - Then, we just need to modify 'app.py' to use the correct environment.

        import os

        def create_app():
            env = os.environ.get('ENV', 'Development')

            if env == 'Production':
                config_str = 'config.ProductionConfig'
            elif env == 'Staging':
                config_str = 'config.StagingConfig'
            else:
                config_str = 'config.DevelopmentConfig'

            app = Flask(__name__)
            app.config.from_object(config_str)

            ...

            return app



- Creating a New Heroku Application

    - Log into Heroku account, and select 'Create New App'.  We'll get a new URL that looks like:

        https://{app_name}.herokuapp.com/


    - Next, we need to install Heroku Postgres add-on.

        > Resources
        > Find More Addons
        > Heroku Postgres
            > Hobby Dev - Free Plan

    
    - Then, we'll set up the environment variables needed for our app.

        1. We generate a secret key locally to be used for our 'SECRET_KEY'.

             import os
             os.urandom(24)

        2. Go to the 'Settings' tab and set up:

             ENV
             MAILGUN_API_KEY
             MAILGUN_DOMAIN
             SECRET_KEY



- Deployment Using Heroku Git

    - A 'Procfile' is a file that will be executed during the startup process in Heroku.  Any
        setup or server start-up scripts can be included in this file.


    - We'll be using GUnicorn, a Python WSGI HTTP server that is compatible with various web
        applications.  It can be used as an interface between web servers and web applications.


    - We'll need to have both Git and the Heroku CLI installed.


    - We'll create a '.gitignore' file for the project.

        static/images/avatars/*
        static/images/recipes/*
        .idea/
        venv/


    - Next, we'll configure out Git repo for Heroku:

        $ heroku login
        $ git init
        $ heroku git:remote -a your-heroku-app


    - We need to add 'gunicorn' to our 'requirements.txt'.

        gunicorn==19.9.0


    - Create a 'main.py' file under the project root folder.  This is the file that will be
        executed by Gunicorn 

        from app import create_app

        app = create_app()


    - Then, we will create our 'Procfile', also at the project root folder.

        release: flask db upgrade
        web: gunicorn main:app


    - Now, push the changes up to Heroku.

        $ git add .
        $ git commit -am "First Commit"
        $ git push heroku master


    - We can use pgadmin using the credentials provided on the Heroku dashboard to make sure our
        database tables have been set up as expected.


    - To test our Heroku deployment, we can run the same tests from Postman.  We just need to change
        the base URL in our requests to 'https://your_heroku_app.herokuapp.com'.



- Setting Up a Front-End Application in Heroku

    - We'll use the 'smilecook-vuejs' application to create a front-end for the Smilecook API.
        We'll create a new app in Heroku for this.


    - Once the app is create, we go to:

        > Settings
        > Config Vars

      Set the variable name 'VUE_APP_API_URL' to the Smilecook API URL.


    - Log into the Heroku CLI, initiailize the Git repo, and push up the changes.

        $ heroku login
        $ git init
        $ heroku git:remote -a your_heroku_app_name

        $ git add .
        $ git commit -am "Make it better"
        $ git push heroku master


    - We should be able to access the front end at it's name in our browser.

        https://your_heroku_app_name.herokuapp.com/