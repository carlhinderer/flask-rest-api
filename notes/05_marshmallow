-----------------------------------------------------------------------
|  CHAPTER 5 - OBJECT SERIALIZATION WITH MARSHMALLOW                  |
-----------------------------------------------------------------------

- marshmallow

    - marshmallow is a package for serialization and deserialization in Python.  It also 
        provides validation features.


    - It allows developers to define schemas, which can be used to represent a field in various
        ways, and automatically perform validation during deserialization.



- A Simple Schema

    - We will use the 'Schema' class from marshmallow to specify the fields for the objects we 
        want to serialize/deserialize.  For instance, here is a very simple schema:

        from marshmallow import Schema, fields

        class SimpleSchema(Schema):

            id = fields.Int()
            username = fields.String(required=True)


    - If the username is not included in a request, a 400 Bad Request response will be returned
        with a 'Validation errors' message.

        {
            "message": "Validation errors",
            "errors": {
                "username": [
                    "Missing data for the required field."
                ]
            }
        }



- Customizing Deserialization Methods

    - We can also customize the way we want to deserialize certain fields.  We can do this 
        by using 'Method' fields in marshmallow.  A 'Method' field receives an optional
        'deserialize' argument, which defines how the field should be deserialized.


    - For instance, we can define a custom method to deserialize the password field.

        class SimpleSchema(Schema):
            id = fields.Int()
            username = fields.String(required=True)
            password = fields.Method(required=True, deserialize='load_password')    

            def load_password(self, value):
                return hash_password(value)



- UserSchema Design

    - For user registration, we will expect a JSON request that specifies the requested attributes.

        id
          We use 'fields.Int()' to represent an integer.  We also use 'dump_only=True', since the
            property is only available for serialization, not deserialization.  This is because
            'id' is auto-generated, not passed in by the user.

        username
          We use 'fields.String()' to represent a string.  We use 'required=True', since the field
            is mandatory.

        email
          We use 'fields.Email()' to represent an email, and 'required=True'.

        password
          We use 'fields.Method()' with the 'load_password()' method.  This will only be invoked
            during deserialization.

        created_at
          We use 'fields.DateTime()' to represent the time format, and 'dump_only=True' since it
            will only be available for serialization.

        updated_at
          We use 'fields.DateTime()' to represent the time format, and 'dump_only=True' since it
            will only be available for serialization.



- Using marshmallow to Validate the User Data

    - First, we install the marshmallow package by adding it to 'requirements.txt'.

        marshmallow==2.19.5


    - Create a 'schemas' folder in the main project.  Add a 'schemas/user.py' file for the
        user schema.

        from marshmallow import Schema, fields

        from utils import hash_password
        
        class UserSchema(Schema):    
            class Meta:
                ordered = True
        
            id = fields.Int(dump_only=True)
            username = fields.String(required=True)
            email = fields.Email(required=True)
            password = fields.Method(required=True, deserialize='load_password')
            created_at = fields.DateTime(dump_only=True)
            updated_at = fields.DateTime(dump_only=True)    
        
            def load_password(self, value):
                return hash_password(value)


    - Next, we'll add the schema to 'resources/user.py'.  We'll also have a public schema
        that omit's the user's email address.  

      When a user accesses its own /users/<username> endpoint, they get their id, username, and 
        email.  When a users is not authenticated or accesses someone else's /users/<username>, the 
        email address is hidden.

        from schemas.user import UserSchema

        user_schema = UserSchema()
        user_public_schema = UserSchema(exclude=('email', ))


    - We modify the 'UserListResource' post method to validate the data in the user's request.

        class UserListResource(Resource):

            def post(self):
                json_data = request.get_json()
                data, errors = user_schema.load(data=json_data)

                if errors:
                    return {'message': 'Validation errors', 'errors': errors}, HTTPStatus.BAD_REQUEST

                if User.get_by_username(data.get('username')):
                    return {'message': 'username already used'}, HTTPStatus.BAD_REQUEST

                if User.get_by_email(data.get('email')):
                    return {'message': 'email already used'}, HTTPStatus.BAD_REQUEST

                user = User(**data)
                user.save()

                return user_schema.dump(user).data, HTTPStatus.CREATED


    - Next, we'll modify the 'UserResource' get method for retrieving a user's data.

        class UserResource(Resource):

            @jwt_optional
            def get(self, username):
                user = User.get_by_username(username=username)

                if user is None:
                    return {'message': 'user not found'}, HTTPStatus.NOT_FOUND

                current_user = get_jwt_identity()

                if current_user == user.id:
                    data = user_schema.dump(user).data
                else:
                    data = user_public_schema.dump(user).data

                return data, HTTPStatus.OK
                


- Testing the User Endpoint Before and After Authentication

    - First, we'll check the user details before being logged in.  We shouldn't see the user's
        email address.

        GET http://localhost:5000/users/James


    - Now, log in using the POST token request, and use the token to get the user details while
        logged in.  We should now see the email.

        GET http://localhost:5000/users/James



- RecipeSchema Design

    - The RecipeSchema should have the following attributes:

        id
          fields.Int(), dump_only=True

        name
          fields.String(), required=True

        description
          fields.String()

        num_of_servings
          fields.Int()

        cook_time
          fields.Int()

        directions
          fields.String()

        is_publish
          fields.Boolean(), dump_only=True

        author

        created_at
          fields.DateTime(), dump_only=True

        updated_at
          fields.DateTime(), dump_only=True



- Implementing RecipeSchema

    - Here is our RecipeSchema in 'schemas/recipe.py'.

        from marshmallow import Schema, fields, post_dump, validate, validates, ValidationError

        class RecipeSchema(Schema):
        
            class Meta:
                ordered = True
        
            id = fields.Integer(dump_only=True)
            name = fields.String(required=True, validate=[validate.Length(max=100)])
            description = fields.String(validate=[validate.Length(max=200)])
            num_of_servings = fields.Integer(validate=validate_num_of_servings)
            directions = fields.String(validate=[validate.Length(max=1000)])
            is_publish = fields.Boolean(dump_only=True)
            created_at = fields.DateTime(dump_only=True)
            updated_at = fields.DateTime(dump_only=True)

            def validate_num_of_servings(n):
                if n < 1:
                    raise ValidationError('Number of servings must be greater than 0.')
                if n > 50:
                    raise ValidationError('Number of servings must not be greater than 50.')


    - We can pass in additional validators using the 'validate' argument.  We use this to validate
        the length of the 'description' and 'directions' fields.


    - There is another way to attach a custom validator to a field, which we use for 'cook_time'.

        cook_time = fields.Integer

        @validates('cook_time')
        def validate_cook_time(self, value):
            if value < 1:
                raise ValidationError('Cook time must be greater than 0.')
            if value > 300:
                raise ValidationError('Cook time must not be greater than 300.')


    - Import the user schema in 'schemas/recipe.py', since we need to display the author information
        for a recipe.  Then, we can define the 'author' attribute.

        from schemas.user import UserSchema

        author = fields.Nested(UserSchema, attribute='user', dump_only=True, only=['id', 'username'])


    - In addition, we add a '@post_dump(pass_many=True)' decorator so that further processing
        can be done when the recipe is serialized.

      A single recipe will be returned as a JSON string, while multiple recipes will be returned
        in a list in '{'data': data}'.  This will be beneficial when we add pagination.



- Using the Recipe Schema


- Testing the Recipe API


- The PATCH Method


- Using the PATCH Method to Update the Recipe


- Searching for Authors and Unpublished Recipes


- Using the webargs Package to Parse the Request Arguments


- Implementing Access Control on Recipes


- Retrieving Recipes from a Specific Author


- Serializing the recipe Object Using marshmallow