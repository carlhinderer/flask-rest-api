-----------------------------------------------------------------------
|  CHAPTER 8 - PAGINATION, SEARCHING, & ORDERING                      |
-----------------------------------------------------------------------

- Paginated APIs

    - We can just use Flask-SQLAlchemy to build pagination into our API.  The results we'll
        return will look something like:

        {
            "links": {
                "first": "http://localhost:5000/recipes?per_page=2&page=1",
                "last": "http://localhost:5000/recipes?per_page=2&page=5",
                "prev": "http://localhost:5000/recipes?per_page=2&page=1",
                "next": "http://localhost:5000/recipes?per_page=2&page=3"
            },
            "page": 2,
            "pages": 5,
            "per_page": 2,
            "total": 9,
            "data": [
                {
                    "data": "data"
                },
                {
                    "data": "data"
                }
            ]
        }



- Implementing Pagination on the Published Recipes Retrieval

    - First, we'll create a pagination schema in 'schema/pagination.py'.

        from flask import request
        from marshmallow import Schema, fields
        from urllib.parse import urlencode

        class PaginationSchema(Schema):
            class Meta:
                ordered = True

        links = fields.Method(serialize='get_pagination_links')
        page = fields.Integer(dump_only=True)
        pages = fields.Integer(dump_only=True)
        per_page = fields.Integer(dump_only=True)
        total = fields.Integer(dump_only=True)

        @staticmethod
        def get_url(page):
            query_args = request.args.to_dict()
            query_args['page'] = page
            return '{}?{}'.format(request.base_url, urlencode(query_args))

        def get_pagination_links(self, paginated_objects):
            pagination_links = {
                'first': self.get_url(page=1),
                'last': self.get_url(page=paginated_objects.pages)
            }

            if paginated_objects.has_prev:
                pagination_links['prev'] = self.get_url(page=paginated_objects.prev_num)

            if paginated_objects.has_next:
                pagination_links['next'] = self.get_url(page=paginated_objects.next_num)

            return pagination_links



    - Next, we'll import the 'PaginationSchema' in 'schemas/recipe.py'.  We also need to delete the
        'wrap' method from the schema.

        from schemas.pagination import PaginationSchema

        class RecipePaginationSchema(PaginationSchema):
            data = fields.Nested(RecipeSchema, attribute='items', many=True)


    - Now, we'll update the Recipe model in 'models/recipe.py' by modifying the 'get_all_published'
        method to return paginated results.

        from sqlalchemy import asc, desc

        @classmethod
        def get_all_published(cls, page, per_page):
            return cls.query.filter_by(is_publish=True).
                             order_by(desc(cls.created_at)).
                             paginate(page=page, per_page=per_page)


    - Finally, we'll make updates to 'resources/recipe.py' in order to return the paginated recipes.
        We'll update the 'get' method to support pagination.

        from webargs import fields
        from webargs.flaskparser import use_kwargs

        from schemas.recipe import RecipeSchema, RecipePaginationSchema

        recipe_pagination_schema = RecipePaginationSchema()

        class RecipeListResource(Resource):
            @use_kwargs({'page': fields.Int(missing=1), 'per_page': fields.Int(missing=20)})
            def get(self, page, per_page):
                paginated_recipes = Recipe.get_all_published(page, per_page)
                return recipe_pagination_schema.dump(paginated_recipes).data, HTTPStatus.OK



- Testing The Pagination Functions

    - First, we'll log in to get a token, then we'll create 8 recipes.  Then, we need to publish
        each of the recipes we just created.


    - Next, we test that we get paginated results.

        GET /recipes


    - We can specify the number of recipes per page using a query param.

        GET /recipes?per_page=2


    - We can also move through the pages of results.

        GET /recipes?per_page=2&page=2



- Implementing Pagination on User-Specific Recipe Retrieval API

    1. Modify the 'get_all_by_user' method in model/recipe.py

    2. Import 'RecipePaginationSchema' into 'resources/user.py'

    3. Declare the 'recipe_pagination_schema' attribute in 'resources/user.py'

    4. Modify the 'UserRecipeListResource.get' method in 'resources/user.py'

    5. Add the '@user_kwargs' decorator for 'UserRecipeListResource.get'.


    - Then, we just need to test the new URLs similarly to how we tested the RecipeListResource
        pagination.



- Recipe Searching

    - We're going to implement simple recipe search using SQL 'LIKE' queries.  Actually, we'll use
        'ILIKE' so that search is case-insensitive.


    - First, we import '_or' from sqlalchemy and modify the 'get_all_published' method in 
        'models/recipe.py'.

        from sqlalchemy import or_

        @classmethod
        def get_all_published(cls, q, page, per_page):
            keyword = '%{keyword}%'.format(keyword=q)

            return cls.query.filter(or_(cls.name.ilike(keyword), cls.description.ilike(keyword)),
                                    cls.is_publish.is_(True)).\
                             order_by(desc(cls.created_at)).\
                             paginate(page=page, per_page=per_page)


    - Modify the 'RecipeListResource' in 'resources/recipe.py'.

        class RecipeListResource(Resource):
            @use_kwargs({'q': fields.Str(missing=''),
                         'page': fields.Int(missing=1),
                         'per_page': fields.Int(missing=20)})
            def get(self, q, page, per_page):
                paginated_recipes = Recipe.get_all_published(q, page, per_page)
                return recipe_pagination_schema.dump(paginated_recipes).data, HTTPStatus.OK



- Sorting and Ordering

    - By default, sorting is by 'created_at'.  We'll keep this default, but also allow other sorting
        operations.

        # SqlAlchemy ascending
        import asc
        sort_logic_asc = asc(getattr(cls, sort))
        cls.query.filter(cls.is_publish=True).order_by(sort_logic_asc)

        # SqlAlchemy descending
        import desc
        sort_logic_desc = desc(getattr(cls, sort))
        cls.query.filter(cls.is_publish=True).order_by(sort_logic_desc)



- Implementing Sorting and Ordering

    - In our 'RecipeListResource.get' method, we'll add query params for 'sort' and 'order'.

        @use_kwargs({'q': fields.Str(missing='),
                     'page': fields.Int(missing=1),
                     'per_page': fields.Int(missing=20),
                     'sort': fields.Str(missing='created_at'),
                     'order': fields.Str(missing='desc')})
        def get(self, q, page, per_page, sort, order):
            if sort not in ['created_at', 'cook_time', 'num_of_servings']:
                sort = 'created_at'

            if order not in ['asc', 'desc']:
                order = 'desc'

            ...
            paginated_recipes = Recipe.get_all_published(q, page, per_page, sort, order)
            ...


    - Then, we'll need to update the 'Recipe.get_all_published' method in 'models/recipe.py'.

        @classmethod
        def get_all_published(cls, q, page, per_page, sort, order):
            keyword = '%{keyword}%'.format(keyword=q)

            if order == 'asc':
                sort_logic = asc(getattr(cls, sort))
            else:
                sort_logic = desc(getattr(cls, sort))

            return cls.query.filter(or_(cls.name.ilike(keyword),
                                        cls.description.ilike(keyword)),
                                    cls.is_publish.is_(True)).\
                             order_by(sort_logic).paginate(page=page, per_page=per_page)