-----------------------------------------------------------------------
|  CHAPTER 8 - PAGINATION, SEARCHING, & ORDERING                      |
-----------------------------------------------------------------------

- Paginated APIs

    - We can just use Flask-SQLAlchemy to build pagination into our API.  The results we'll
        return will look something like:

        {
            "links": {
                "first": "http://localhost:5000/recipes?per_page=2&page=1",
                "last": "http://localhost:5000/recipes?per_page=2&page=5",
                "prev": "http://localhost:5000/recipes?per_page=2&page=1",
                "next": "http://localhost:5000/recipes?per_page=2&page=3"
            },
            "page": 2,
            "pages": 5,
            "per_page": 2,
            "total": 9,
            "data": [
                {
                    "data": "data"
                },
                {
                    "data": "data"
                }
            ]
        }



- Implementing Pagination on the Published Recipes Retrieval

    - First, we'll create a pagination schema in 'schema/pagination.py'.

        from flask import request
        from marshmallow import Schema, fields
        from urllib.parse import urlencode

        class PaginationSchema(Schema):
            class Meta:
                ordered = True

            