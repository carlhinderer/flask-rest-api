-----------------------------------------------------------------------
|  CHAPTER 6 - EMAIL CONFIRMATION                                     |
-----------------------------------------------------------------------

- Mailgun

    - We'll update user registration to verify a user's email when a new account is created.
        First, we'll get started using Mailgun, a 3rd party email provider.

    - We sign up and verify our account at 'www.mailgun.com'.



- Using the Mailgun API to Send Emails

    - We'll create a new class to make our API calls in 'mailgun.py'.

        class MailgunApi:
            API_URL = 'api.mailgun.net/v3/{}/messages'

            def __init__(self, domain, api_key): ...

            def send_email(self, to, subject, text, html=None): ...


    - We'll test sending an email from the console.

        >>> from mailgun import MailgunApi
        >>> mailgun = MailgunApi(domain='sandbox111112222233333444455555.mailgun.org',
                                 api_key='12abc-abc123-abc123')

        >>> mailgun.send_email(to='smilecook.api@gmail.com',
                               subject='Hello',
                               text='Hello World!')



- User Account Activation Workflow

    - We'll add a rule that a user has to activate their account before they can access 
        their account dashboard.

    - We'll add an 'is_active' attribute to the User model.

    - We'll send an activation email with a unique token that will be used to activate the
        account.  We'll use the 'itsdangerous' package to generate those unique tokens and
        verify they are genuine.



- Generating the Account Activation

    - First, we need to add 'itsdangerous' to 'requirements.txt'.

        itsdangerous==1.1.0


    - Well need the 'SECRET_KEY' defined in our 'config.py', which we already had defined for
        creating JWTs.

        class Config:
            SECRET_KEY = 'super-secret-key'


    - Next, we'll add the utility methods to 'utils.py' to generate and verify tokens.

        from flask import current_app
        from itsdangerous import URLSafeTimedSerializer

        def generate_token(email, salt=None):
            serializer = URLSafeTimedSerializer(current_app.config.get('SECRET_KEY'))
            return serializer.dumps(email, salt=salt)

        def verify_token(token, max_age=(30 * 60), salt=None):
            serializer = URLSafeTimedSerializer(current_app.config.get('SECRET_KEY'))
            try:
                email = serializer.loads(token, max_age=max_age, salt=salt)
            except:
                return False
            return email



- Sending Out the User Account Activation Email

    - We'll update 'resources/user.py'.

        from flask import request, url_for

        from mailgun import MailgunApi
        from utils import generate_token, verify_token

        mailgun = MailgunApi(domain='sandboxabc123.mailgun.org',
                      api_key='abc123-abc123-abc123')


    - Then, in the same file, in the account creation after 'user.save()':

        class UserListResource(Resource):
            def post(self):
                ...
                user.save()
                token = generate_token(user.email, salt='activate')
                subject = 'Please confirm your registration.'

                link = url_for('useractivateresource',
                               token=token,
                               _external=True)

                text = 'Hi, Thanks for using SmileCook! Please confirm your \
                          registration by clicking on the link: {}'.format(link)